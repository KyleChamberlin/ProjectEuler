;~ Problem 2 from projectEuler.net 
;~ Posted 19 October 2001
;~ Solution by Kyle Chamberlin
;~ Solved 12 July 2012
;~ Problem 2 is stated as :
;~ Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;~
;~ 						1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;~
;~ By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
;~
;~ Method:
;~ For this problem we will be holding successive terms of the fibinacci sequence in two seperate variables $fib_a and $fib_b. 
;~ In order to progress through the sequence we will take need to make $fib_a = $fib_b, and make $fib_b = $fib_a + $fib_b.
;~ We can do the operations in any order, however once we change the value of either $fib_a or $fib_b, we can no longer accomplish the second calculation. 
;~ In order to accomplish the needed calculations it will be necessary to introduce another variable that will serve as a holding place for one of our values.
;~ Below, we will see that we have used a variable $hold_b to serve this purpose. 


$answer = 0 ; start answer out at zero
$fib_a = 1 ; start the fibinacci sequence (first Term) *1*,1,2,3,5...
$fib_b = 1 ; start the fibinacci sequence (second term) 1,*1*,2,3,5...

while($fib_b < 4000000) ; while our second term is less than 4,000,000, continue. Since $fib_b starts the sequence of numbers that we wish to add, we use this for our While( **condition**)
	if ( Mod($fib_b,2) = 0 ) Then ; check to see if the current term is even. So if $fib_b mod 2 = 0 then $fib_b is an even number. (e.g. 1 mod 2 = 1, or 2,000,000 mod 2 = 0)
		$answer += $fib_b ; add the fibinacci term which is both even and under 4,000,000 to the answer.
	EndIf
	$hold_b = $fib_b ; store the current value of fibinacci term $fib_b in the variable $hold_b
	$fib_b += $fib_a ; add a + b to find the next fibinacci number (i,e a = 1, b = 1, ... a + b = 2...) the += operator acts the same as $fib_b = $fib_b + $fib_a.
	$fib_a = $hold_b ; now move the value stored in $hold_b (the former value of $fib_b) to $fib_a so that the next time through the loop we get (i.e. a = 1, b = 2, ... a + b = 3...)
WEnd ; continue until the condition above "while( **condition** )" is met, in this case untill the next term in the sequence is over 4,000,000

MsgBox(0,"Answer","the answer is " & $answer) ; display the answer